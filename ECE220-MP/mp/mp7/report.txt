PUT YOUR MP7 REPORT IN THIS FILE.

1.reverse
/*	identify the bug	*/
testcase	
case1	./prev ab
	9 8 7 6 5 4 3 2 1 0
	What's on the stack now?

	"ab" reversed is "ba" (length 32766)
	desire output: ..(length 2)
		
case2	./prev abcd
	9 8 7 6 5 4 3 2 1 0
	What's on the stack now?

	"abcd" reversed is "dcba" (length 32769)
	desire output: ..(length 4)

case3	./prev abcde
	9 8 7 6 5 4 3 2 1 0
	What's on the stack now?

	"abcde" reversed is "edcba" (length 32771)
	desire output: ..(length 5)


case4	./prev abc
	9 8 7 6 5 4 3 2 1 0
	What's on the stack now?

	"abc" reversed is "cba" (length 3)
	correct

this bug seem appear randomly, for some length the return value seem unreasonably large.




	
/*	trace the bug		*/

gdb command
gdb b print_reverse
gdb run ab
gdb display rest
gdb where
(gdb s) or (gdb n) 
   
rest = 0 (in first two print_reverse() )
rest = 32767 (in last print_reverse() )
output shows the initial of rest is random




/*	analysis the bug	*/

for the result of gdb command maybe the variable rest is not initialize.

so we can make a little change in prmain.c line 36

(int32_t rest;) -> (int32_t rest = 0;)

/*************************************************************************************/

2.PrimeNumber




/*	identify the bug	*/
testcase

case1 is_prime(4) 
	retrun ture (desire return false)
	
case2 is_prime(9) 
	retrun ture (desire return false)
	
case3 is_prime(25) 
	retrun ture (desire return false)
	
case4 is_prime(7) 
	retrun ture (correct)
	
case5 is_prime(6) 
	retrun false (correct)

seem like the square of prime number will cause the bug





/*	trace the bug		*/
command of gdb 
gdb b is_prime
gdb b divides_evenly
gdb r
gdb c

result of gdb //since the result is too abstract, so I can only count the number of divides_evenly calls in is_prime

is_prime(2)
call times 0

is_prime(3)
call times 0

is_prime(4)
call times 0

is_prime(5)
call times 1

is_prime(9)
call times 1

is_prime(11)
call times 2

is_prime(25)
call times 3

is_prime(41)
call times 5

the number of calling divides_evenly is small,seem the calling number increment at the buggy num between num+1,
so maybe the is_prime(buggy num) lack one times divides_even



/*	analysis the bug	*/
analyse the times of divides_even in each is_prime, is maybe check divides_even in the rule of follows
for(i=2; square(i) < n; i++){
	if(divides_even(i,n)!=0){
	retrun 0
	}
}
so for the 4,9,25 there lack one times check, maybe we can fix the bug by just (<) -> (<=)

3.sort

/*	identify the bug	*/
testcase

case1 	./sort test1.txt
	1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117
	correct
	
case2	./sort test1.txt
	1 3 9 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100
	desire output(1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117)
	
case3	/sort test1.txt
	1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 97 99 100 
	desire output(1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117)
	
case3	/sort test1.txt
	1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 96 97 99 100 
	desire output(1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 117)
	
sometimes the output is correct, and sometimes the output is incorrect and we lost the largest number but we have one random number appear twice	
	
	
	
	
/*	trace the bug		*/

I add a printArray(arr,20;) into the sort.c line 36
command
gdb r test1.txt

output
1 22 3 45 51 96 117 18 29 97 9 100 41 23 12 99 15 19 58 13 
1 22 3 45 51 96 117 18 58 97 9 100 41 23 12 99 15 19 29 13 
1 22 3 45 51 96 117 99 58 97 9 100 41 23 12 18 15 19 29 13 
1 22 3 45 51 100 117 99 58 97 9 96 41 23 12 18 15 19 29 13 
1 22 3 45 97 100 117 99 58 51 9 96 41 23 12 18 15 19 29 13 
1 22 3 99 97 100 117 45 58 51 9 96 41 23 12 18 15 19 29 13 
1 22 117 99 97 100 3 45 58 51 9 96 41 23 12 18 15 19 29 13 
1 22 117 99 97 100 23 45 58 51 9 96 41 3 12 18 15 19 29 13 
1 99 117 22 97 100 23 45 58 51 9 96 41 3 12 18 15 19 29 13 
1 99 117 58 97 100 23 45 22 51 9 96 41 3 12 18 15 19 29 13 
1 99 117 58 97 100 23 45 29 51 9 96 41 3 12 18 15 19 22 13 
117 99 1 58 97 100 23 45 29 51 9 96 41 3 12 18 15 19 22 13 
117 99 100 58 97 1 23 45 29 51 9 96 41 3 12 18 15 19 22 13 
117 99 100 58 97 96 23 45 29 51 9 1 41 3 12 18 15 19 22 13 <---from this line
100 99 13 58 97 96 23 45 29 51 9 1 41 3 12 18 15 19 22 100 <---to this line I find a strange bug of 117 change to 100 (other change is reasonable)
100 99 96 58 97 13 23 45 29 51 9 1 41 3 12 18 15 19 22 100 
100 99 96 58 97 41 23 45 29 51 9 1 13 3 12 18 15 19 22 100 
99 22 96 58 97 41 23 45 29 51 9 1 13 3 12 18 15 19 100 100 
99 97 96 58 22 41 23 45 29 51 9 1 13 3 12 18 15 19 100 100 
99 97 96 58 51 41 23 45 29 22 9 1 13 3 12 18 15 19 100 100 
97 19 96 58 51 41 23 45 29 22 9 1 13 3 12 18 15 99 100 100 
97 58 96 19 51 41 23 45 29 22 9 1 13 3 12 18 15 99 100 100 
97 58 96 45 51 41 23 19 29 22 9 1 13 3 12 18 15 99 100 100 
96 58 15 45 51 41 23 19 29 22 9 1 13 3 12 18 97 99 100 100 
96 58 41 45 51 15 23 19 29 22 9 1 13 3 12 18 97 99 100 100 
58 18 41 45 51 15 23 19 29 22 9 1 13 3 12 96 97 99 100 100 
58 51 41 45 18 15 23 19 29 22 9 1 13 3 12 96 97 99 100 100 
58 51 41 45 22 15 23 19 29 18 9 1 13 3 12 96 97 99 100 100 
51 12 41 45 22 15 23 19 29 18 9 1 13 3 58 96 97 99 100 100 
51 45 41 12 22 15 23 19 29 18 9 1 13 3 58 96 97 99 100 100 
51 45 41 29 22 15 23 19 12 18 9 1 13 3 58 96 97 99 100 100 
45 3 41 29 22 15 23 19 12 18 9 1 13 51 58 96 97 99 100 100 
45 29 41 3 22 15 23 19 12 18 9 1 13 51 58 96 97 99 100 100 
45 29 41 19 22 15 23 3 12 18 9 1 13 51 58 96 97 99 100 100 
41 29 13 19 22 15 23 3 12 18 9 1 45 51 58 96 97 99 100 100 
41 29 23 19 22 15 13 3 12 18 9 1 45 51 58 96 97 99 100 100 
29 1 23 19 22 15 13 3 12 18 9 41 45 51 58 96 97 99 100 100 
29 22 23 19 1 15 13 3 12 18 9 41 45 51 58 96 97 99 100 100 
29 22 23 19 18 15 13 3 12 1 9 41 45 51 58 96 97 99 100 100 
23 22 9 19 18 15 13 3 12 1 29 41 45 51 58 96 97 99 100 100 
23 22 15 19 18 9 13 3 12 1 29 41 45 51 58 96 97 99 100 100 
22 1 15 19 18 9 13 3 12 23 29 41 45 51 58 96 97 99 100 100 
22 19 15 1 18 9 13 3 12 23 29 41 45 51 58 96 97 99 100 100 
22 19 15 12 18 9 13 3 1 23 29 41 45 51 58 96 97 99 100 100 
19 1 15 12 18 9 13 3 22 23 29 41 45 51 58 96 97 99 100 100 
19 18 15 12 1 9 13 3 22 23 29 41 45 51 58 96 97 99 100 100 
18 3 15 12 1 9 13 19 22 23 29 41 45 51 58 96 97 99 100 100 
18 12 15 3 1 9 13 19 22 23 29 41 45 51 58 96 97 99 100 100 
15 12 13 3 1 9 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
13 12 9 3 1 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
12 1 9 3 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
12 3 9 1 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
9 3 1 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
3 1 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 
1 3 9 12 13 15 18 19 22 23 29 41 45 51 58 96 97 99 100 100 




/*	analysis the bug	*/

from analysis different buggy situation, I find sometimes the 117 number will randomly change to another number that is also in this txt.
the bug maybe follow situation 
1. when the 117 to the root swap a number out of the arr and the number is randomly equal to the number in arr
2. when the 117 to the root, is will swap to the wrong number in the arr and the swap operation is make the 117 change to the number is change




















